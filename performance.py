# performance.py

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta, date # Garder date pour st.date_input
import builtins # Toujours essentiel pour g√©rer le probl√®me de str()

# Importations sp√©cifiques au test GLDG
import yfinance as yf # Utilis√© indirectement par fetch_stock_history
from historical_data_fetcher import fetch_stock_history

# Les imports suivants ne sont plus n√©cessaires car l'onglet "Performance Globale" est retir√© :
# from portfolio_journal import load_portfolio_journal
# from historical_performance_calculator import reconstruct_historical_performance
# from utils import format_fr


def display_performance_history():
    """
    Affiche uniquement le test de r√©cup√©ration des donn√©es historiques GLDG.
    (Version simplifi√©e - l'onglet "Performance Globale" est retir√© pour le d√©bogage.)
    """
    
    st.subheader("üìä Test de R√©cup√©ration des Donn√©es Historiques GLDG")
    st.write("Cet onglet sert √† v√©rifier sp√©cifiquement la r√©cup√©ration des donn√©es historiques de GLDG.")

    today = datetime.now()
    default_start_date_gldg = today - timedelta(days=30)
    
    start_date_gldg = st.date_input(
        "Date de d√©but (GLDG)",
        value=default_start_date_gldg.date(), # S'assurer que c'est un objet date
        min_value=datetime(1990, 1, 1).date(),
        max_value=today.date(),
        key="start_date_gldg_test"
    )
    end_date_gldg = st.date_input(
        "Date de fin (GLDG)",
        value=today.date(),
        min_value=datetime(1990, 1, 1).date(),
        max_value=today.date(),
        key="end_date_gldg_test"
    )

    if st.button("R√©cup√©rer les donn√©es GLDG"):
        st.info(f"Tentative de r√©cup√©ration des donn√©es pour GLDG du {start_date_gldg.strftime('%Y-%m-%d')} au {end_date_gldg.strftime('%Y-%m-%d')}...")
        
        try:
            start_dt_gldg = datetime.combine(start_date_gldg, datetime.min.time())
            end_dt_gldg = datetime.combine(end_date_gldg, datetime.max.time())
            
            # Appel de la fonction pour r√©cup√©rer l'historique
            historical_prices = fetch_stock_history("GLDG", start_dt_gldg, end_dt_gldg)

            if not historical_prices.empty:
                st.success(f"‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s pour GLDG!")
                st.write("Aper√ßu des donn√©es (5 premi√®res lignes) :")
                st.dataframe(historical_prices.head(), use_container_width=True)
                st.write("...")
                st.write("Aper√ßu des donn√©es (5 derni√®res lignes) :")
                st.dataframe(historical_prices.tail(), use_container_width=True)
                st.write(f"Nombre total de jours : **{len(historical_prices)}**")
                # Utilisation de builtins.str et builtins.isinstance pour √©viter le probl√®me de str() √©cras√©
                st.write(f"Type de l'objet retourn√© : `{builtins.str(type(historical_prices))}`") 
                st.write(f"L'index est un `DatetimeIndex` : `{builtins.isinstance(historical_prices.index, pd.DatetimeIndex)}`")

                st.subheader("Graphique des cours de cl√¥ture GLDG")
                st.line_chart(historical_prices)

            else:
                st.warning(f"‚ùå Aucune donn√©e r√©cup√©r√©e pour GLDG sur la p√©riode sp√©cifi√©e. "
                           "V√©rifiez le ticker ou la p√©riode, et votre connexion √† Yahoo Finance.")
        except Exception as e:
            # Utilisation de builtins.str pour afficher l'erreur en toute s√©curit√©
            st.error(f"‚ùå Une erreur est survenue lors de la r√©cup√©ration des donn√©es : {builtins.str(e)}")
            if "str' object is not callable" in builtins.str(e):
                st.error("‚ö†Ô∏è **Confirmation :** L'erreur `str() object is not callable` persiste. Cela indique fortement "
                         "qu'une variable ou fonction nomm√©e `str` est d√©finie ailleurs dans votre code, "
                         "√©crasant la fonction native de Python. **La recherche globale `str = ` est imp√©rative.**")
            elif "No data found" in builtins.str(e) or "empty DataFrame" in builtins.str(e):
                 st.warning("Yahoo Finance n'a pas retourn√© de donn√©es. Le ticker est-il valide ? La p√©riode est-elle trop courte ou dans le futur ?")
            else:
                st.error(f"D√©tail de l'erreur : {builtins.str(e)}")
