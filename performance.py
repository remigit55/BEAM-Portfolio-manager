# performance.py

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta, date

# Import the new modules
from portfolio_journal import load_portfolio_journal
from historical_performance_calculator import reconstruct_historical_performance
from utils import format_fr # Make sure utils.py contains this function

# NOUVEAUX IMPORTS N√âCESSAIRES POUR LE TEST GLDG
import yfinance as yf
from historical_data_fetcher import fetch_stock_history
import builtins

def display_performance_history():
    """
    Displays the portfolio's historical performance with a date filter,
    recalculating values using historical data, and includes a GLDG historical data test.
    """
    
    # Cr√©ation des onglets dans la section Performance
    performance_tabs = st.tabs(["Performance Globale", "Test Historique GLDG"])

    with performance_tabs[0]: # Onglet Performance Globale
        st.subheader("Reconstruction des Totaux Quotidiens")

        # Load the portfolio journal
        portfolio_journal = load_portfolio_journal()

        if not portfolio_journal:
            st.info("Aucune donn√©e historique de portefeuille n'a √©t√© enregistr√©e. Chargez un portefeuille et utilisez l'application pour commencer √† construire l'historique.")
            return

        # --- D√âBUT DE LA V√âRIFICATION AM√âLIOR√âE DU JOURNAL ---
        # Filtre les snapshots potentiellement invalides ou vides
        valid_snapshots = [
            s for s in portfolio_journal 
            if 'portfolio_data' in s 
            and isinstance(s['portfolio_data'], pd.DataFrame) 
            and not s['portfolio_data'].empty
        ]
        
        if not valid_snapshots:
            st.warning("Le journal historique du portefeuille est vide ou ne contient pas de snapshots valides. Veuillez vous assurer que le portefeuille est correctement enregistr√© via la page Portefeuille (ou via l'import de donn√©es).")
            return

        # Utilise uniquement les snapshots valides pour la suite
        portfolio_journal = valid_snapshots
        # --- FIN DE LA V√âRIFICATION AM√âLIOR√âE ---

        # üëâ Ajout temporaire d‚Äôun ancien snapshot si un seul est disponible
        if len(portfolio_journal) == 1:
            ancien_snapshot = portfolio_journal[0].copy()
            ancien_snapshot["date"] = portfolio_journal[0]["date"] - timedelta(days=7)
            # S'assurer que portfolio_data est aussi une copie profonde pour √©viter les r√©f√©rences
            ancien_snapshot["portfolio_data"] = ancien_snapshot["portfolio_data"].copy() 
            portfolio_journal.insert(0, ancien_snapshot)
        
        # Ensuite on peut calculer les bornes normalement
        min_journal_date = min(s['date'] for s in portfolio_journal)
        max_journal_date = (datetime.now() - timedelta(days=1)).date()

        
        today = datetime.now().date()
        
        # Default end date is today or last journal date if today is too far in the future
        default_end_date = min(max_journal_date, today)

        date_range = st.date_input(
            "S√©lectionnez la p√©riode d'analyse de la performance :",
            value=(min_journal_date, default_end_date),
            min_value=min_journal_date,
            max_value=today,
            key="performance_date_range"
        )

        if len(date_range) == 2:
            start_date_perf, end_date_perf = date_range[0], date_range[1]
        else:
            st.warning("Veuillez s√©lectionner une p√©riode valide (date de d√©but et de fin).")
            return

        st.info(f"Calcul de la performance historique du {start_date_perf.strftime('%Y-%m-%d')} au {end_date_perf.strftime('%Y-%m-%d')}...")

        # CONVERSION DES DATES AU FORMAT DATETIME.DATETIME POUR LA COMPATIBILIT√â
        start_datetime_perf = datetime.combine(start_date_perf, datetime.min.time())
        end_datetime_perf = datetime.combine(end_date_perf, datetime.max.time())

        with st.spinner("Reconstruction de la performance historique (cela peut prendre un certain temps si l'historique est long)..."):
            df_reconstructed = reconstruct_historical_performance(
                start_datetime_perf,
                end_datetime_perf,
                st.session_state.get("devise_cible", "EUR")
            )

        if df_reconstructed.empty:
            st.warning("Aucune donn√©e reconstruite pour la p√©riode s√©lectionn√©e. Assurez-vous d'avoir des snapshots de portefeuille et que les cours des tickers/taux de change sont disponibles.")
            return

        display_currency = st.session_state.get("devise_cible", "EUR")

        # Display reconstructed data
        st.subheader("Historique des Valeurs du Portefeuille")
        st.dataframe(df_reconstructed.style.format({
            "Valeur Acquisition": format_fr,
            "Valeur Actuelle": format_fr,
            "Gain/Perte Absolu": format_fr,
            "Gain/Perte (%)": lambda x: f"{format_fr(x, 2)} %"
        }), use_container_width=True)

        # Display charts
        st.subheader("Tendances des Valeurs du Portefeuille")

        df_melted = df_reconstructed.melt(
            id_vars=["Date", "Devise"], 
            value_vars=["Valeur Acquisition", "Valeur Actuelle"],
            var_name="Type de Valeur", 
            value_name="Montant"
        )

        fig_values = px.line(
            df_melted,
            x="Date",
            y="Montant",
            color="Type de Valeur",
            title="√âvolution des Valeurs du Portefeuille",
            labels={"Montant": f"Montant ({display_currency})", "Date": "Date"}
        )
        fig_values.update_layout(hovermode="x unified")
        st.plotly_chart(fig_values, use_container_width=True)

        st.subheader("Tendance du Gain/Perte")
        fig_gain_loss = px.line(
            df_reconstructed,
            x="Date",
            y="Gain/Perte Absolu",
            title="√âvolution du Gain/Perte Absolu Quotidien",
            labels={"Gain/Perte Absolu": f"Gain/Perte Absolu ({display_currency})", "Date": "Date"}
        )
        fig_gain_loss.update_layout(hovermode="x unified")
        st.plotly_chart(fig_gain_loss, use_container_width=True)

        fig_gain_loss_percent = px.line(
            df_reconstructed,
            x="Date",
            y="Gain/Perte (%)",
            title="√âvolution du Gain/Perte Quotidien (%)",
            labels={"Gain/Perte (%)": "Gain/Perte (%)", "Date": "Date"}
        )
        fig_gain_loss_percent.update_layout(hovermode="x unified")
        st.plotly_chart(fig_gain_loss_percent, use_container_width=True)


    with performance_tabs[1]: # Onglet : Test Historique GLDG
        st.subheader("üìä Test de R√©cup√©ration des Donn√©es Historiques GLDG")
        st.write("Cet onglet sert √† v√©rifier sp√©cifiquement la r√©cup√©ration des donn√©es historiques de GLDG.")

        today = datetime.now()
        default_start_date_gldg = today - timedelta(days=30)
        
        start_date_gldg = st.date_input(
            "Date de d√©but (GLDG)",
            value=default_start_date_gldg,
            min_value=datetime(1990, 1, 1).date(),
            max_value=today.date(),
            key="start_date_gldg_test"
        )
        end_date_gldg = st.date_input(
            "Date de fin (GLDG)",
            value=today.date(),
            min_value=datetime(1990, 1, 1).date(),
            max_value=today.date(),
            key="end_date_gldg_test"
        )

        if st.button("R√©cup√©rer les donn√©es GLDG"):
            st.info(f"Tentative de r√©cup√©ration des donn√©es pour GLDG du {start_date_gldg.strftime('%Y-%m-%d')} au {end_date_gldg.strftime('%Y-%m-%d')}...")
            
            try:
                start_dt_gldg = datetime.combine(start_date_gldg, datetime.min.time())
                end_dt_gldg = datetime.combine(end_date_gldg, datetime.max.time())
                
                historical_prices = fetch_stock_history("GLDG", start_dt_gldg, end_dt_gldg)

                if not historical_prices.empty:
                    st.success(f"‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s pour GLDG!")
                    st.write("Aper√ßu des donn√©es (5 premi√®res lignes) :")
                    st.dataframe(historical_prices.head(), use_container_width=True)
                    st.write("...")
                    st.write("Aper√ßu des donn√©es (5 derni√®res lignes) :")
                    st.dataframe(historical_prices.tail(), use_container_width=True)
                    st.write(f"Nombre total de jours : **{len(historical_prices)}**")
                    st.write(f"Type de l'objet retourn√© : `{builtins.str(type(historical_prices))}`")
                    st.write(f"L'index est un `DatetimeIndex` : `{builtins.isinstance(historical_prices.index, pd.DatetimeIndex)}`")

                    st.subheader("Graphique des cours de cl√¥ture GLDG")
                    st.line_chart(historical_prices)

                else:
                    st.warning(f"‚ùå Aucune donn√©e r√©cup√©r√©e pour GLDG sur la p√©riode sp√©cifi√©e. "
                               "V√©rifiez le ticker ou la p√©riode, et votre connexion √† Yahoo Finance.")
            except Exception as e:
                st.error(f"‚ùå Une erreur est survenue lors de la r√©cup√©ration des donn√©es : {builtins.str(e)}")
                if "str' object is not callable" in builtins.str(e):
                    st.error("‚ö†Ô∏è **Confirmation :** L'erreur `str() object is not callable` persiste. Cela indique fortement "
                             "qu'une variable ou fonction nomm√©e `str` est d√©finie ailleurs dans votre code, "
                             "√©crasant la fonction native de Python. **La recherche globale `str = ` est imp√©rative.**")
                elif "No data found" in builtins.str(e) or "empty DataFrame" in builtins.str(e):
                     st.warning("Yahoo Finance n'a pas retourn√© de donn√©es. Le ticker est-il valide ? La p√©riode est-elle trop courte ou dans le futur ?")
                else:
                    st.error(f"D√©tail de l'erreur : {builtins.str(e)}")
